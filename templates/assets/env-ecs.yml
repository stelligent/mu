---
AWSTemplateFormatVersion: '2010-09-09'
Description: MU environment containing an ECS cluster and instances for running containers
Parameters:
  EC2InstanceProfileArn:
    Type: String
    Description: ARN of instance profile for EC2 instance to assume
  ConsulTaskRoleArn:
    Type: String
    Description: ARN of IAM role for consul task to assume
  InstanceType:
    Type: String
    Description: Instance type to use.
    Default: t2.micro
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster
  MaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched in your ECS cluster
  KeyName:
    Type: String
    Description: KeyName to associate with worker instances.  Leave blank to disable SSH access.
    Default: ''
  SshAllow:
    Description: Subnet from which to allow SSH access.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: 'must be a valid CIDR block: x.x.x.x/x.'
  ScaleOutThreshold:
    Description: Threshold at which a scale out event will be initiated
    Type: Number
    Default: '75'
  ScaleInThreshold:
    Description: Threshold at which a scale in event will be initiated
    Type: Number
    Default: '30'
  ImageId:
    Description: ECS AMI to launch
    Type: String
    Default: ''
  InstanceSubnetIds:
    Type: String
    Description: Name of the value to import for the ecs subnet ids
  VpcId:
    Type: String
    Description: Name of the value to import for the VpcId
  HttpProxy:
    Type: String
    Description: Proxy to use from ECS cluster instances (host:port)
    Default: ''
  ConsulServerAutoScalingGroup:
    Type: String
    Description: The Autoscaling group name for consul servers to connect to.  Consul is disabled if not provided
    Default: ''
  ElbSecurityGroup:
    Type: String
    Description: The security group to add to the ECS instance for ELB access
  ConsulRpcClientSecurityGroup:
    Type: String
    Description: The security group to add to the ECS instance for access to consul (optional)
    Default: ''
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Instance Configuration"
        Parameters:
          - InstanceType
          - KeyName
          - SshAllow
      - Label:
          default: "Auto Scaling Configuration"
        Parameters:
          - DesiredCapacity
          - MaxSize
    ParameterLabels:
      InstanceType:
        default: "Instance type to launch?"
      KeyName:
        default: "Key to grant SSH access (blank for none)?"
      SshAllow:
        default: "CIDR block to grant SSH access?"
      DesiredCapacity:
        default: "Desired ECS cluster instance count?"
      MaxSize:
        default: "Maximum ECS cluster instance count?"
Conditions:
  HasKeyName:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref KeyName
        - ''
  HasConsulServer:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref ConsulServerAutoScalingGroup
        - ''
  HasConsulClientSG:
    "Fn::Not":
      - "Fn::Equals":
        - !Ref ConsulRpcClientSecurityGroup
        - ''
Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}
      GroupDescription: Microservice Host Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SshAllow
  Host2HostRuleIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
  Host2InternetEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: 'tcp'
      FromPort: '0'
      ToPort: '65535'
      CidrIp: '0.0.0.0/0'
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
  Host2HostRuleEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      DestinationSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - ClusterLogGroup
    - Host2InternetEgress
    Properties:
      VPCZoneIdentifier:
        Fn::Split:
        - ","
        - Fn::ImportValue: !Sub ${InstanceSubnetIds}
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: '1'
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1
  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
  MemoryAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Scale-out if Memory > ${ScaleOutThreshold}% for 5 minutes
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ScaleOutThreshold
      AlarmActions:
      - !Ref ScaleOutPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref EcsCluster
      ComparisonOperator: GreaterThanThreshold
  MemoryAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Scale-in if Memory < ${ScaleInThreshold}% for 5 minutes
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ScaleInThreshold
      AlarmActions:
      - !Ref ScaleInPolicy
      Dimensions:
      - Name: ClusterName
        Value: !Ref EcsCluster
      ComparisonOperator: LessThanThreshold
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              awslogs: []
              jq: []
              aws-cli: []
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
                runas=root
            "/etc/awslogs/etc/proxy.conf":
              content: !Sub |
                HTTP_PROXY=http://${HttpProxy}/
                HTTPS_PROXY=http://${HttpProxy}/
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [dmesg]
                file = /var/log/dmesg
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/dmesg/{instance_id}

                [messages]
                file = /var/log/messages
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/messages/{instance_id}
                datetime_format = %b %d %H:%M:%S

                [docker]
                file = /var/log/docker
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/docker/{instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                [ecs]
                file = /var/log/ecs/*
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/ecs/{instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [cloud-init]
                file = /var/log/cloud-init*
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/cloud-init/{instance_id}
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [cfn-init]
                file = /var/log/cfn-init*
                log_group_name = ${AWS::StackName}
                log_stream_name = instance/cfn-init/{instance_id}
                datetime_format = %Y-%m-%d %H:%M:%S
            "/consul-check.sh":
              content: !Sub |
                #!/bin/bash
                SERVERIP=172.17.0.1:${consul_http_port}

                RESULT=`curl $SERVERIP --connect-timeout 3`
                echo $RESULT

                if [[ $RESULT = "Consul Agent" ]]; then
                  echo "Consul Running"
                else
                  # Restart the task here
                  aws ecs start-task --cluster ${EcsCluster} --task-definition ${AWS::StackName}-consul-agent --container-instances INSTANCE_ARN --started-by INSTANCE_ARN --region ${AWS::Region}
                fi
            "/etc/cron.d/consul_check":
              content: !Sub |
                * * * * * root bash /consul-check.sh
              owner: root
              group: root
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${EcsCluster}  >> /etc/ecs/ecs.config
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/awslogs/awslogs.conf"
                - "/etc/awslogs/etc/proxy.conf"
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      ImageId: !Ref ImageId
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      - !Ref ElbSecurityGroup
      - Fn::If:
          - HasConsulClientSG
          - !Ref ConsulRpcClientSecurityGroup
          - !Ref "AWS::NoValue"
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfileArn
      KeyName:
        Fn::If:
          - HasKeyName
          - !Ref KeyName
          - !Ref "AWS::NoValue"
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="==BOUNDARY=="
          MIME-Version: 1.0

          --==BOUNDARY==
          Content-Type: text/text/x-shellscript; charset="us-ascii"

          #!/bin/bash -xe

          CFN_PROXY_ARGS=""
          if [[ ! -z "${HttpProxy}" ]]; then
            echo "Configuring HTTP_PROXY=${HttpProxy}"

            # Set Yum HTTP proxy
            if [ ! -f /var/lib/cloud/instance/sem/config_yum_http_proxy ]; then
              echo "proxy=http://${HttpProxy}" >> /etc/yum.conf
              echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_yum_http_proxy
            fi

            # Set Docker HTTP proxy
            if [ ! -f /var/lib/cloud/instance/sem/config_docker_http_proxy ]; then
              echo "export HTTP_PROXY=http://${HttpProxy}/" >> /etc/sysconfig/docker
              echo "export HTTPS_PROXY=http://${HttpProxy}/" >> /etc/sysconfig/docker
              echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_docker_http_proxy

              service docker restart
            fi

            # Set ECS agent HTTP proxy
            if [ ! -f /var/lib/cloud/instance/sem/config_ecs-agent_http_proxy ]; then
              echo "HTTP_PROXY=${HttpProxy}" >> /etc/ecs/ecs.config
              echo "NO_PROXY=169.254.169.254,169.254.170.2,/var/run/docker.sock" >> /etc/ecs/ecs.config
              echo "$$: $(date +%s.%N | cut -b1-13)" > /var/lib/cloud/instance/sem/config_ecs-agent_http_proxy
            fi

            CFN_PROXY_ARGS="--http-proxy http://${HttpProxy} --https-proxy http://${HttpProxy}"
          fi


          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region} $CFN_PROXY_ARGS
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsAutoScalingGroup --region ${AWS::Region} $CFN_PROXY_ARGS

          --==BOUNDARY==
          Content-Type: text/text/upstart-job; charset="us-ascii"

          #upstart-job
          description "Consul Agent"
          author "Stelligent"
          start on started ecs

          script
            exec 2>>/var/log/consul-start.log
            set -x
            until curl -s http://localhost:51678/v1/metadata
            do
                sleep 1
            done

            echo "Initializing consul agent: ${ConsulServerAutoScalingGroup}"

            instance_arn=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $NF}' )
            sed -i "s/INSTANCE_ARN/$instance_arn/g" /consul-check.sh
            aws ecs start-task --cluster ${EcsCluster} --task-definition ${AWS::StackName}-consul-agent --container-instances $instance_arn --started-by $instance_arn --region ${AWS::Region}
          end script
          --==BOUNDARY==--
  ClusterLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Ref AWS::StackName
  ConsulAgentTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: HasConsulServer
    Properties:
      NetworkMode: host
      Family: !Sub "${AWS::StackName}-consul-agent"
      ContainerDefinitions:
      - Name: consul-agent
        Cpu: 200
        Essential: 'true'
        Image: 'consul:1.0.0'
        Memory: 128
        Environment:
          - Name: CONSUL_BIND_INTERFACE
            Value: eth0
          - Name: CONSUL_CLIENT_INTERFACE
            Value: docker0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref AWS::StackName
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: instance
        Command:
          - 'agent'
          - '-datacenter'
          - !Ref AWS::Region
          - '-retry-join'
          - !Sub 'provider=aws tag_key=aws:autoscaling:groupName tag_value=${ConsulServerAutoScalingGroup}'
      - Name: registrator
        Cpu: 200
        Essential: 'true'
        Image: 'gliderlabs/registrator'
        Memory: 128
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref AWS::StackName
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: instance
        Command:
          - "-retry-attempts=-1"
          - !Sub "consul://172.17.0.1:8500"
        MountPoints:
          - ContainerPath: /tmp/docker.sock
            SourceVolume: dockersock
      Volumes:
        - Name: dockersock
          Host:
            SourcePath: /var/run/docker.sock
      TaskRoleArn: !Ref ConsulTaskRoleArn
Outputs:
  InstanceSubnetIds:
    Value:
      Fn::ImportValue: !Sub ${InstanceSubnetIds}
    Description: Subnet Ids for the ECS cluster
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSubnetIds
  VpcId:
    Value:
      Fn::ImportValue: !Sub ${VpcId}
    Description: Vpc Id for the environment
    Export:
      Name: !Sub ${AWS::StackName}-VpcId
  EcsCluster:
    Value: !Ref EcsCluster
    Description: Name of the ECS cluster.
    Export:
      Name: !Sub ${AWS::StackName}-EcsCluster
  InstanceSecurityGroup:
    Value: !Ref InstanceSecurityGroup
    Description: Security Group ID for the microservice instances
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup

